from collections import Counter

# Define the dataset
dataset = [
    ("SUNNY", "HOT", "HIGH", "WEAK", "NO"),
    ("SUNNY", "HOT", "HIGH", "STRONG", "NO"),
    ("OVERCAST", "HOT", "HIGH", "WEAK", "YES"),
    ("RAIN", "MILD", "HIGH", "WEAK", "YES"),
    ("RAIN", "COOL", "NORMAL", "WEAK", "YES"),
    ("RAIN", "COOL", "NORMAL", "STRONG", "NO"),
    ("OVERCAST", "COOL", "NORMAL", "STRONG", "YES"),
    ("SUNNY", "MILD", "HIGH", "WEAK", "NO"),
    ("SUNNY", "COOL", "NORMAL", "WEAK", "YES"),
    ("RAIN", "MILD", "NORMAL", "WEAK", "YES"),
    ("SUNNY", "MILD", "NORMAL", "STRONG", "YES"),
    ("OVERCAST", "MILD", "HIGH", "STRONG", "YES"),
    ("OVERCAST", "HOT", "NORMAL", "WEAK", "YES"),
    ("RAIN", "MILD", "HIGH", "STRONG", "NO")
]

# Calculate total instances and class counts
total_instances = len(dataset)
class_counts = Counter(instance[-1] for instance in dataset)

# Calculate prior probabilities
prior_probabilities = {label: count / total_instances for label, count in class_counts.items()}

# Calculate conditional probabilities
conditional_probabilities = {}
for instance in dataset:
    features = instance[:-1]
    label = instance[-1]
    for i, feature in enumerate(features):
        if (i, feature, label) in conditional_probabilities:
            conditional_probabilities[(i, feature, label)] += 1
        else:
            conditional_probabilities[(i, feature, label)] = 1

# Predict unknown sample
unknown_sample = ("OVERCAST", "MILD", "NORMAL", "STRONG")
class_probabilities = {}
for label in class_counts.keys():
    class_probability = prior_probabilities[label]
    for i, feature in enumerate(unknown_sample):
        if (i, feature, label) in conditional_probabilities:
            class_probability *= conditional_probabilities[(i, feature, label)] / class_counts[label]
        else:
            class_probability = 0  # If feature not found in training data, set probability to 0
            break
    class_probabilities[label] = class_probability

# Determine predicted class
predicted_class = max(class_probabilities, key=class_probabilities.get)
print("Predicted class for the unknown sample:", predicted_class)
